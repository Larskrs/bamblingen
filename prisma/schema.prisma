generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}
enum UserRole {
  ADMIN
  USER
}
enum Visibility {
  FEATURED
  PUBLISHED
  HIDDEN
  PRIVATE
}

model User {
  id                    String  @id @default(uuid())
  name                  String?
  username              String?
  first_name            String?
  last_name             String?
  email                 String?         @unique
  emailVerified         DateTime?
  image                 String?
  banner                String? @default("")
  biography             String?
  accounts              Account[]
  sessions              Session[]
  Authenticator         Authenticator[]

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  role                  UserRole @default(USER)
}

model Account {
  id                    String  @id @default(uuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
 
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String  @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id                   String  @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(uuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
